// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestCaseManagement.Data;

#nullable disable

namespace TestCaseManagement.Api.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250806124435_FixModuleSchema")]
    partial class FixModuleSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.ManualTestCaseStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Steps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestCaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.ToTable("ManualTestCaseSteps");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.Module", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductVersionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ProductVersionId");

                    b.HasIndex("ProductId", "Name", "Version")
                        .IsUnique();

                    b.ToTable("Modules", (string)null);
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.ModuleAttribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId", "Key")
                        .IsUnique();

                    b.ToTable("ModuleAttributes");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.ProductVersion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "Version")
                        .IsUnique();

                    b.ToTable("ProductVersions");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestCase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Actual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Scenario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestCaseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TestTool")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UseCase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId", "TestCaseId", "Version")
                        .IsUnique();

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestCaseAttribute", b =>
                {
                    b.Property<string>("TestCaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestCaseId", "Key");

                    b.ToTable("TestCaseAttributes");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestRun", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("TestRuns");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestRunResult", b =>
                {
                    b.Property<string>("TestRunId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestSuiteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestCaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExecutedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ExecutedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TestRunId", "TestSuiteId", "TestCaseId");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestSuiteId");

                    b.ToTable("TestRunResults");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestRunTestSuite", b =>
                {
                    b.Property<string>("TestRunId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestSuiteId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TestRunId", "TestSuiteId");

                    b.HasIndex("TestSuiteId");

                    b.ToTable("TestRunTestSuites");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestSuite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("TestSuites");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestSuiteTestCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestCaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestSuiteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestSuiteId", "TestCaseId")
                        .IsUnique();

                    b.ToTable("TestSuiteTestCases");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.Upload", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TestCaseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.ToTable("Uploads");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.ManualTestCaseStep", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.TestCase", "TestCase")
                        .WithMany("ManualTestCaseSteps")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.Module", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.Product", "Product")
                        .WithMany("Modules")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestCaseManagement.Api.Models.Entities.ProductVersion", null)
                        .WithMany("Modules")
                        .HasForeignKey("ProductVersionId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.ModuleAttribute", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.Module", "Module")
                        .WithMany("ModuleAttributes")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.ProductVersion", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.Product", "Product")
                        .WithMany("ProductVersions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestCase", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.Module", "Module")
                        .WithMany("TestCases")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestCaseAttribute", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.TestCase", "TestCase")
                        .WithMany("TestCaseAttributes")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestRun", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.Product", "Product")
                        .WithMany("TestRuns")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestRunResult", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.TestCase", "TestCase")
                        .WithMany("TestRunResults")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestCaseManagement.Api.Models.Entities.TestRun", "TestRun")
                        .WithMany("TestRunResults")
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestCaseManagement.Api.Models.Entities.TestSuite", "TestSuite")
                        .WithMany()
                        .HasForeignKey("TestSuiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TestCase");

                    b.Navigation("TestRun");

                    b.Navigation("TestSuite");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestRunTestSuite", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.TestRun", "TestRun")
                        .WithMany("TestRunTestSuites")
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestCaseManagement.Api.Models.Entities.TestSuite", "TestSuite")
                        .WithMany("TestRunTestSuites")
                        .HasForeignKey("TestSuiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TestRun");

                    b.Navigation("TestSuite");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestSuite", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.Product", "Product")
                        .WithMany("TestSuites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestSuiteTestCase", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestCaseManagement.Api.Models.Entities.TestCase", "TestCase")
                        .WithMany("TestSuiteTestCases")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestCaseManagement.Api.Models.Entities.TestSuite", "TestSuite")
                        .WithMany("TestSuiteTestCases")
                        .HasForeignKey("TestSuiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("TestCase");

                    b.Navigation("TestSuite");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.Upload", b =>
                {
                    b.HasOne("TestCaseManagement.Api.Models.Entities.TestCase", "TestCase")
                        .WithMany("Uploads")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.Module", b =>
                {
                    b.Navigation("ModuleAttributes");

                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.Product", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("ProductVersions");

                    b.Navigation("TestRuns");

                    b.Navigation("TestSuites");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.ProductVersion", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestCase", b =>
                {
                    b.Navigation("ManualTestCaseSteps");

                    b.Navigation("TestCaseAttributes");

                    b.Navigation("TestRunResults");

                    b.Navigation("TestSuiteTestCases");

                    b.Navigation("Uploads");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestRun", b =>
                {
                    b.Navigation("TestRunResults");

                    b.Navigation("TestRunTestSuites");
                });

            modelBuilder.Entity("TestCaseManagement.Api.Models.Entities.TestSuite", b =>
                {
                    b.Navigation("TestRunTestSuites");

                    b.Navigation("TestSuiteTestCases");
                });
#pragma warning restore 612, 618
        }
    }
}
